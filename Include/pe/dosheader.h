/*
 * Copyright (c) 2008-2016, Integrity Project Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the Integrity Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE
 */

#ifndef __TBA_PE_DOS_HEADER_H
#define __TBA_PE_DOS_HEADER_H

/*
 * dosheader.h
 *
 * A wraper for dos executable files header.
 *
 * Author: Elad Raz <e@eladraz.com>
 */
#include "xStl/types.h"
#include "xStl/data/list.h"
#include "xStl/data/hash.h"
#include "xStl/data/array.h"
#include "xStl/data/string.h"
#include "xStl/stream/basicIO.h"
#include "xStl/stream/stringerStream.h"
#include "xStl/stream/forkStream.h"
#include "xStl/stream/memoryAccesserStream.h"
#include "pe/datastruct.h"
#include "pe/section.h"
#include "pe/dosSection.h"

/*
 * Forward deceleration for output streams
 */
#ifdef PE_TRACE
    class cDosHeader;
    cStringerStream& operator << (cStringerStream& out, const cDosHeader& object);
#endif // PE_TRACE

/*
 * Parse the MZ header and section for a DOS .EXE file format.
 *
 * The function supports both snapshot image of a stream and forkable image
 * information. See read(basicInput&) and read(cForkStream).
 */
class cDosHeader : public IMAGE_DOS_HEADER
{
public:
    /*
     * Read the file-header from a file.
     * NOTE: This constructor create a memory snapshot image of the sections.
     *
     * See cDosHeader::read
     */
    cDosHeader(basicInput& stream,
               bool shouldReadSections = true);

    /*
     * Read the file-header from a forkable maintable stream.
     * This special reading
     */

    // Default copy-constructor and operator = will auto-generated by the
    // compiler

    /*
     * Copy-constructor.
     * Construct a new cDosHeader object and copy the data from IMAGE_DOS_HEADER
     * struct.
     */
    cDosHeader(const IMAGE_DOS_HEADER& other);

    /*
     * Generate a new header values. If any section was changed, a relocation
     * was added/removed or the starting entry point just removed, use this
     * function to regenerate a normal "IMAGE_DOS_HEADER".
     *
     * cs - The segment of which the application should start
     * ip - The offset of which the application should start
     * ss - The segment of the application stack
     * sp - The size of the stack.
     */
    void generateNewHeader(uint16 cs,
                           uint16 ip,
                           uint16 ss,
                           uint16 sp);

    /*
     * Reads the IMAGE_DOS_HEADER struct from a stream. If the
     * 'shouldReadSections' argument is true, reads from the stream all sub-
     * section code and load them into the class memory.
     *
     * NOTE: This function create a memory snapshot image of the sections.
     *
     * NOTE: The input-stream must have the following properties:
     *       Seeking from beginning. Getting stream length and stream position
     *
     * stream - The input stream to read the information from
     * shouldReadSections - Set to true in order to read all sections.
     *
     * Throw EXCEPTION_FORMAT_ERROR if the format of the stream is invalid.
     */
    void read(basicInput& stream,
              bool shouldReadSections = true);

    /*
     * Just like the read(basicInput&) but instead of taking a snapshot, this
     * function link the section into the 'fork-stream' data.
     * Cool ;) isn't it?
     *
     * NOTE: This function read all sections. (It's doesn't cost a thing)
     *
     * See read.
     */
    void read(const cMemoryAccesserStream& stream);

    /*
     * Writes the IMAGE_DOS_HEADER struct to a stream.
     *
     * stream - The output stream to write the information to
     */
    void write(basicOutput& stream) const;

    /*
     * Writes the IMAGE_DOS_HEADER struct to a stream. If the
     * 'shouldWriteSections' argument is true, writes the content of all
     * sections into the stream (A complete executble file).
     *
     * NOTE: The reason why the stream includes input stream is that seek
     *       operation is reacquire in order to write the sub-sections..
     *
     * stream - The output stream to write the information to
     * shouldWriteSections - Set to true in order to write all sections.
     */
    void write(basicIO& stream,
               bool shouldWriteSections = true) const;

    /*
     * Copy the data from another IMAGE_DOS_HEADER to this class.
     * Make the header valid.
     *
     * NOTE: This function doesn't change the previous relocation tables and the
     *       sections lists.
     */
    void changeDosHeader(const IMAGE_DOS_HEADER& other);

    /*
     * Operator = (cDosHeader).
     * See 'changeDosHeader()'
     *
     * NOTE: This function delete all previous section-descriptors and
     *       relocations.
     */
    cDosHeader& operator = (const IMAGE_DOS_HEADER& other);

private:
    /*
     * Friend debug dumping operator.
     */
    #ifdef PE_TRACE
    friend cStringerStream& operator << (cStringerStream& out,
                                         const cDosHeader& object);
    #endif // PE_TRACE

    /*
     * Make the class valid and clear all tables
     */
    void init();

    /*
     * Read the section of a subfile.
     */
    void internalReadSections(cMemoryAccesserStream& stream);

    /*
     * Return the size of the executable length, not including the PE file
     * format embedded within it.
     *
     * NOTE: This function doesn't change the stream-pointer.
     *       It restore it.
     */
    uint getRealExecutableLength(basicInput& stream);

    // The list of all DOS sections
    cList<cSectionPtr> m_sections;
    // The relocation array
    cArray<uint32> m_relocations;
};

#endif // __TBA_PE_DOS_HEADER_H

