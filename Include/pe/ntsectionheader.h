/*
 * Copyright (c) 2008-2016, Integrity Project Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the Integrity Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE
 */

#ifndef __TBA_STL_PE_NTSECTIONHEADER_H
#define __TBA_STL_PE_NTSECTIONHEADER_H

/*
 * ntsectionheader.h
 *
 * A wrapper over IMAGE_SECTION_HEADER struct. Holds the information regarding
 * to a NT section.
 *
 * Author: Elad Raz <e@eladraz.com>
 */
#include "xStl/types.h"
#include "xStl/data/array.h"
#include "xStl/data/list.h"
#include "xStl/data/string.h"
#include "xStl/stream/basicIO.h"
#include "xStl/stream/forkStream.h"
#include "xStl/stream/memoryAccesserStream.h"
#include "xStl/stream/stringerStream.h"
#include "pe/datastruct.h"
#include "pe/section.h"
#include "pe/sectionTypes.h"

/*
 * Forward deceleration for output streams
 */
#ifdef PE_TRACE
class cNtSectionHeader;
cStringerStream& operator << (cStringerStream& out,
                              const cNtSectionHeader& object);
#endif // PE_TRACE

/*
 * Holds the information regarding to a NT section.
 */
class cNtSectionHeader : public IMAGE_SECTION_HEADER,
                         public cSection
{
public:
    /*
     * Default snapshot constructor.
     *
     * imageBase - The base of the image.
     *             Used only for setting the cSection::m_type. This constructor
     *             DOESN'T preform any relocation to the content of the stream
     * stream         - The input stream. See cNtSectionHeader::read
     * type           - The type of the section. See SectionType
     * shouldReadData - See cNtSectionHeader::read
     * isMemory       - See cNtSectionHeader::read
     *
     * Throw exception incase of reading error.
     */
    cNtSectionHeader(addressNumericValue imageBase,
                     basicInput& stream,
                     SectionType type = SECTION_TYPE_WINDOWS_CODE,
                     bool shouldReadData = true,
                     bool isMemory = false);

    /*
     * Default forkable constructor.
     *
     * stream - the cForkStream stream object
     *
     * See cNtSectionHeader::cNtSectionHeader for more information.
     * See cNtSectionHeader::read for more information
     */
    cNtSectionHeader(addressNumericValue imageBase,
                     cMemoryAccesserStream& stream,
                     SectionType type = SECTION_TYPE_WINDOWS_CODE,
                     bool shouldReadData = true,
                     bool isMemory = true);

    /*
     * Creates a section class based over a IMAGE_SECTION_HEADER variable
     */
    cNtSectionHeader(const IMAGE_SECTION_HEADER& other);

    // Copy-constructor and operator = will auto-generated by the compiler

    // IMAGE_SECTION_HEADER appendix functions

    /*
     * See cSection::canBeHandledByMe.
     * Return true for all windows section types
     */
    virtual bool canBeHandledByMe(SectionType type);

    /*
     * Returns the relocation of the section.
     * Returns NULL stream to indicate no relocations is found
     */
    const cBuffer& getRelocations() const;

    /*
     * Returns the line-numbers table of a section
     * Returns NULL stream to indicate no line-numbering is avaliable.
     */
    const cBuffer& getLinenumbers() const;

    /*
     * Changes the content of the IMAGE_SECTION_HEADER.
     *
     * NOTE: The function change the following:
     *         - IMAGE_SECTION_HEADER
     *         - cSection::m_name
     *         - cSection::m_base (Don't have enough information for relocation)
     *         - cSection::m_flags
     *         - cSection::m_type (Hardcoded SECTION_TYPE_WINDOWS_CODE)
     *       The function doesn't change the following:
     *         - cSection::m_data
     *
     * NOTE: The function don't have enough information to put the right
     *       section-type. This job must be done by the caller.
     */
    void changeNtSection(const IMAGE_SECTION_HEADER& other);


    /*
     * Read a section from a stream. The section is snapshot from the stream.
     *
     * stream         - The stream to read the information from
     * shouldReadData - Set to true in order to read the entire content
     * isMemory       - Set to true in order to access the stream as memory
     *                  relocated stream
     *
     * If "shouldReadData" is true, the  handler will seek to the position of
     * the content of the section inside the stream and read all section
     * content. After the reading the function will return the pointer back to
     * it's position, after the IMAGE_SECTION_HEADER.
     *
     * If "isMemory" is true the stream will be treated as memory-stripped
     * representation of a PE file. This means that the stream is starting from
     * 'image-base-address' and in-order to read the data, it will be seeked to
     * the 'VirtualAddress' locations, instead of the 'RawAddress' location.
     *
     * Throw exception in case of reading error
     */
    void read(basicInput& stream,
              bool shouldReadData = true,
              bool isMemory = false);

    /*
     * See cNtSectionHeader::read
     *
     * Instead of snapshoting the content of the section, this function redirect
     * the forkable stream to the main stream.
     *
     * NOTE: The position of the stream is change and it's located after the
     *       section header.
     */
    void read(cMemoryAccesserStream& stream,
              bool shouldReadData = true,
              bool isMemory = true);

    /*
     * Write a section to a stream.
     *
     * stream          - The stream to write the information to
     * shouldWriteData - Set to true in order to write the entire content
     * isMemory        - Set to true in order to access the stream as memory
     *                   relocated stream
     *
     * If "shouldWriteData" is true, the  handler will seek to the position of
     * the content of the section inside the stream and write all section
     * content. After the write the function will return the pointer back to
     * it's position, after the IMAGE_SECTION_HEADER.
     *
     * If "isMemory" is true the stream will be treated as memory-stripped
     * representation of a PE file. This means that the stream is starting from
     * 'image-base-address' and in-order to read the data, it will be seeked to
     * the 'VirtualAddress' locations, instead of the 'RawAddress' location.
     *
     * Throw exception in case of writing error
     */
    void write(basicIO& stream,
               bool shouldWriteData = true,
               bool isMemory = true) const;

    /*
     * Change the section header to another section header struct.
     * This function deletes the content of the section, line-number and
     * relocations.
     */
    cNtSectionHeader& operator = (const IMAGE_SECTION_HEADER& other);

private:
    /*
     * Clears the section content, line-number and relocations.
     */
    void init();

    /*
     * OUTSTREAM operator <<.
     * Used to dump the content of the section into human readable string
     */
    #ifdef PE_TRACE
    friend cStringerStream& operator << (cStringerStream& out,
                                         const cNtSectionHeader& object);
    #endif // PE_TRACE

    // Holds the relocation of the section
    cMemoryAccesserStreamPtr m_relocations;
    // Holds the line-numbering of the section
    cMemoryAccesserStreamPtr m_linenumbers;

    // Holds the address of the image base the PE was loaded to
    addressNumericValue m_imageBase;
};

#endif // __TBA_STL_PE_NTSECTIONHEADER_H

